using System.Net.Http.Json;
using System.Text.Json;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;

namespace Front.Handlers;

public static class CommandHandlers
{
    private static async Task TryFetchUserId(ITelegramBotClient bot, long chatId, string apiUrl,
        CancellationToken cancellationToken)
    {
        try
        {
            var response =
                await HandlerUtils.HttpClient.PostAsJsonAsync($"{apiUrl}/user/save", new { chatId }, cancellationToken);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync(cancellationToken);
                var root = JsonDocument.Parse(json).RootElement;

                if (root.TryGetProperty("id", out var idProp) && Guid.TryParse(idProp.GetString(), out var userId))
                {
                    UserCache.SetUserId(chatId, userId);
                    Console.WriteLine($"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É: {userId}");
                }
            }
            else
            {
                Console.WriteLine($"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ö–æ–¥: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ userId: {ex.Message}");
        }
    }
    

    public static async Task HandleStart(ITelegramBotClient bot, long chatId, string apiUrl,
        CancellationToken cancellationToken, bool isReturning = false)
    {
        var greeting = isReturning
            ? "üìç –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é"
            : "üé¨ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤ —á–µ—Ä–µ–∑ TMDB.";

        await TryFetchUserId(bot, chatId, apiUrl, cancellationToken);

        var inlineKeyboard = new InlineKeyboardMarkup([
            [
                InlineKeyboardButton.WithCallbackData("üîç –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é", "search_by_title"),
                InlineKeyboardButton.WithCallbackData("üé≠ –ü–æ—à—É–∫ –∑–∞ –∂–∞–Ω—Ä–æ–º", "search_by_genre")
            ],
            [
                InlineKeyboardButton.WithCallbackData("‚úÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ —Ñ—ñ–ª—å–º–∏", "watched_movies"),
                InlineKeyboardButton.WithCallbackData("üïí –í—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏", "saved_movies")
            ]
        ]);

        await bot.SendMessage(
            chatId,
            greeting,
            replyMarkup: new ReplyKeyboardRemove(),
            cancellationToken: cancellationToken);

        await bot.SendMessage(
            chatId,
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
            replyMarkup: inlineKeyboard,
            cancellationToken: cancellationToken);
    }


    public static async Task HandleRandom(ITelegramBotClient bot, long chatId, string apiUrl,
        CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            Console.WriteLine($"‚ÑπÔ∏è userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ-—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è chatId={chatId}");
            await TryFetchUserId(bot, chatId, apiUrl, cancellationToken);
            userId = UserCache.GetUserId(chatId);

            if (userId == null)
            {
                await bot.SendMessage(chatId, "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                    cancellationToken: cancellationToken);
                return;
            }
        }

        var json = await HandlerUtils.GetJsonAsync($"{apiUrl}/movie/random");
        if (json is null)
        {
            await bot.SendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—å–º", cancellationToken: cancellationToken);
            return;
        }

        var message = HandlerUtils.FormatMovieShort(json.Value);
        var movieId = json.Value.GetProperty("id").GetInt32();
        var keyboard = HandlerUtils.CreateMovieButtons(userId.Value, movieId);

        MovieCache.Set(userId.Value, movieId, json.Value);

        await HandlerUtils.SendMovieWithOptionalPoster(
            bot,
            chatId,
            json.Value,
            message,
            cancellationToken,
            keyboard);

        await bot.SendMessage(
            chatId,
            "‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω—é",
            replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
            cancellationToken: cancellationToken);
    }



    public static async Task HandleSearchCommand(ITelegramBotClient bot, long chatId, string apiUrl,
        CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            Console.WriteLine($"‚ÑπÔ∏è userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ–Ω—É—î–º–æ /start –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–ª—è chatId={chatId}");
            await TryFetchUserId(bot, chatId, apiUrl, cancellationToken);
        }

        await bot.SendMessage(
            chatId,
            "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ—à—É–∫—É:",
            cancellationToken: cancellationToken,
            replyMarkup: HandlerUtils.GetBackToMenuKeyboard());
    }
    
    public static async Task HandleTopSaved(ITelegramBotClient bot, long chatId, string apiUrl, CancellationToken cancellationToken)
{
    var userId = UserCache.GetUserId(chatId);
    if (userId == null)
    {
        await bot.SendMessage(chatId, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –∫–æ–º–∞–Ω–¥—É /start", cancellationToken: cancellationToken);
        return;
    }

    var json = await HandlerUtils.GetJsonAsync($"{apiUrl}/movie/unwatched/{userId}");
    if (json is null)
    {
        await bot.SendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤", cancellationToken: cancellationToken);
        return;
    }

    var movies = json.Value.EnumerateArray()
        .Select(movie =>
        {
            var rawDetails = movie.GetProperty("details").GetString();
            var movieId = movie.GetProperty("tmdb_id").GetInt32();
            if (rawDetails is null) return null;

            var details = JsonDocument.Parse(rawDetails).RootElement;
            var rating = details.TryGetProperty("vote_average", out var r) && r.TryGetDecimal(out var rate) ? rate : 0;
            return new { Movie = details, Rating = rating, MovieId = movieId };
        })
        .Where(x => x != null)
        .OrderByDescending(x => x!.Rating)
        .Take(5)
        .ToList();

    if (!movies.Any())
    {
        await bot.SendMessage(chatId, "üòï –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–æ–ø—É", cancellationToken: cancellationToken);
        return;
    }

    foreach (var item in movies)
    {
        MovieCache.Set(userId.Value, item!.MovieId, item.Movie);
        var message = HandlerUtils.FormatMovieShort(item.Movie);
        await HandlerUtils.SendMovieWithOptionalPoster(
            bot, chatId, item.Movie, message, cancellationToken, HandlerUtils.SavedMovieButtons(userId.Value, item.MovieId));
    }

    await bot.SendMessage(chatId,
        "‚¨áÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é",
        replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
        cancellationToken: cancellationToken);
}
    public static async Task HandleStats(ITelegramBotClient bot, long chatId, string apiUrl, CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            await bot.SendMessage(chatId, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É /start", cancellationToken: cancellationToken);
            return;
        }

        var statsJson = await HandlerUtils.GetJsonAsync($"{apiUrl}/movie/stats/{userId}");
        if (statsJson is null)
        {
            await bot.SendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", cancellationToken: cancellationToken);
            return;
        }

        var watched = statsJson.Value.GetProperty("watched").GetInt32();
        var unwatched = statsJson.Value.GetProperty("unwatched").GetInt32();

        var msg = $"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n" +
                  $"‚úÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ: <b>{watched}</b>\n" +
                  $"üíæ –í—ñ–¥–∫–ª–∞–¥–µ–Ω–æ: <b>{unwatched}</b>";

        await bot.SendMessage(chatId, msg, parseMode: Telegram.Bot.Types.Enums.ParseMode.Html,
            replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
            cancellationToken: cancellationToken);
    }
    public static async Task HandleFilteredWatched(ITelegramBotClient bot, long chatId, string apiUrl, decimal minRating, CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            await bot.SendMessage(chatId, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start", cancellationToken: cancellationToken);
            return;
        }

        var json = await HandlerUtils.GetJsonAsync($"{apiUrl}/movie/watched/{userId}/filter?minRating={minRating}");
        if (json is null)
        {
            await bot.SendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏", cancellationToken: cancellationToken);
            return;
        }

        var movies = json.Value.EnumerateArray().ToList();
        if (!movies.Any())
        {
            await bot.SendMessage(chatId, $"üòï –£ –≤–∞—Å –Ω–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤ –∑ –æ—Ü—ñ–Ω–∫–æ—é –±—ñ–ª—å—à–µ {minRating}", cancellationToken: cancellationToken);
            return;
        }

        foreach (var movie in movies)
        {
            var rawDetails = movie.GetProperty("details").GetString();
            if (string.IsNullOrWhiteSpace(rawDetails)) continue;

            var movieDetails = JsonDocument.Parse(rawDetails).RootElement;
            var movieId = movie.GetProperty("tmdb_id").GetInt32();

            MovieCache.Set(userId.Value, movieId, movieDetails);
            var message = HandlerUtils.FormatMovieShort(movieDetails);

            await HandlerUtils.SendMovieWithOptionalPoster(
                bot,
                chatId,
                movieDetails,
                message,
                cancellationToken,
                HandlerUtils.WatchedMovieButtons(userId.Value, movieId)
            );
        }

        await bot.SendMessage(chatId,
            "‚¨áÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é",
            replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
            cancellationToken: cancellationToken);
    }




    public static async Task HandleTextInput(ITelegramBotClient bot, long chatId, string userInput, string apiUrl,
        CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            Console.WriteLine($"‚ÑπÔ∏è userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ-—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è chatId={chatId}");
            await TryFetchUserId(bot, chatId, apiUrl, cancellationToken);
            userId = UserCache.GetUserId(chatId);

            if (userId == null)
            {
                await bot.SendMessage(chatId, "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                    cancellationToken: cancellationToken);
                return;
            }
        }

        var json = await HandlerUtils.GetJsonAsync($"{apiUrl}/search/{userId}?query={Uri.EscapeDataString(userInput)}");

        if (json is null)
        {
            await bot.SendMessage(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
                cancellationToken: cancellationToken);
            return;
        }

        var results = json.Value.EnumerateArray().ToList();
        if (!results.Any())
        {
            await bot.SendMessage(chatId,
                "ü§∑‚Äç‚ôÇÔ∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
                cancellationToken: cancellationToken);
            return;
        }
        
        UserInputStates.Clear(chatId);

        SearchResultsCache.Set(chatId, results);
        await ShowSearchPage(bot, chatId, userId.Value, cancellationToken);
    }

    public static async Task HandleRatingInput(ITelegramBotClient bot, long chatId, string userInput, string apiUrl, CancellationToken cancellationToken)
{
    var data = SearchResultsCache.Get(chatId);
    if (data is null || !data.Value.Movies.Any())
    {
        await bot.SendMessage(chatId, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ–ª—å–º –¥–ª—è –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è", cancellationToken: cancellationToken);
        return;
    }

    var rawData = data.Value.Movies.First();

    if (!rawData.TryGetProperty("userId", out var userIdProp) || !Guid.TryParse(userIdProp.GetString(), out var parsedUserId))
    {
        await bot.SendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", cancellationToken: cancellationToken);
        return;
    }

    if (!rawData.TryGetProperty("movieId", out var movieIdProp) || !movieIdProp.TryGetInt32(out var movieId))
    {
        await bot.SendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É", cancellationToken: cancellationToken);
        return;
    }

    if (!double.TryParse(userInput.Replace(',', '.'), out var rating) || rating < 1 || rating > 10)
    {
        await bot.SendMessage(
            chatId,
            "‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: <b>8,5</b>",
            parseMode: Telegram.Bot.Types.Enums.ParseMode.Html,
            replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
            cancellationToken: cancellationToken
        );
        return; 
    }

    var ratingJson = new { rating };
    var response = await HandlerUtils.HttpClient.PutAsJsonAsync(
        $"{apiUrl}/movie/{parsedUserId}/{movieId}/set-rating", ratingJson, cancellationToken);

    if (response.IsSuccessStatusCode)
    {
        await bot.SendMessage(chatId, $"‚úÖ –í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ {rating}/10 –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", cancellationToken: cancellationToken);

        MovieCache.UpdateUserRating(parsedUserId, movieId, rating);

        var messageId = MessageCache.Get(chatId);
        if (messageId.HasValue && MovieCache.TryGet(parsedUserId, movieId, out var updatedMovie))
        {
            var updatedCaption = HandlerUtils.FormatMovieFull(updatedMovie);

            await bot.EditMessageCaption(
                chatId: chatId,
                messageId: messageId.Value,
                caption: updatedCaption,
                parseMode: Telegram.Bot.Types.Enums.ParseMode.Html,
                replyMarkup: HandlerUtils.WatchedMovieFullButtons(parsedUserId, movieId),
                cancellationToken: cancellationToken
            );

            await bot.SendMessage(
                chatId,
                "‚¨áÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é",
                replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
                cancellationToken: cancellationToken
            );
        }
        
        MessageCache.Clear(chatId);
        SearchResultsCache.Clear(chatId);
        UserInputStates.Clear(chatId);
    }
    else
    {
        await bot.SendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫—É", cancellationToken: cancellationToken);
    }
}

    public static async Task ShowFilteredWatched(ITelegramBotClient bot, long chatId, string apiUrl, decimal minRating, CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            await bot.SendMessage(chatId, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", cancellationToken: cancellationToken);
            return;
        }

        var json = await HandlerUtils.GetJsonAsync($"{apiUrl}/movie/watched/{userId}/filter?minRating={minRating}");
        if (json is null)
        {
            await bot.SendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—å–º—ñ–≤", cancellationToken: cancellationToken);
            return;
        }

        var movies = json.Value.EnumerateArray().ToList();
        if (!movies.Any())
        {
            await bot.SendMessage(
                chatId,
                $"üòï –ù–µ–º–∞—î —Ñ—ñ–ª—å–º—ñ–≤ –∑ –≤–∞—à–æ—é –æ—Ü—ñ–Ω–∫–æ—é –±—ñ–ª—å—à–µ {minRating}",
                replyMarkup: HandlerUtils.GetBackToMenuKeyboard(),
                cancellationToken: cancellationToken
            );
            return;
        }


        foreach (var movie in movies)
        {
            var rawDetails = movie.GetProperty("details").GetString();
            if (string.IsNullOrWhiteSpace(rawDetails)) continue;

            var details = JsonDocument.Parse(rawDetails).RootElement;
            var movieId = movie.GetProperty("tmdb_id").GetInt32();

            MovieCache.Set(userId.Value, movieId, details);
            var message = HandlerUtils.FormatMovieShort(details);

            await HandlerUtils.SendMovieWithOptionalPoster(bot, chatId, details, message, cancellationToken,
                HandlerUtils.WatchedMovieButtons(userId.Value, movieId));
        }
        
        await bot.SendMessage(chatId,
            "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫",
            replyMarkup: new ReplyKeyboardMarkup(new[]
            {
                new KeyboardButton[] { "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "üîÅ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ" }
            }) { ResizeKeyboard = true },
            cancellationToken: cancellationToken);
    }



    
    public static async Task ShowSearchPage(ITelegramBotClient bot, long chatId, Guid userId, CancellationToken cancellationToken)
    {
        var data = SearchResultsCache.Get(chatId);
        if (data is null) return;

        var (movies, page) = data.Value;
        const int pageSize = 3;
        var pagedMovies = movies.Skip(page * pageSize).Take(pageSize).ToList();

        foreach (var movie in pagedMovies)
        {
            var message = HandlerUtils.FormatMovieShort(movie);
            var movieId = movie.GetProperty("id").GetInt32();
            var keyboard = HandlerUtils.CreateMovieButtons(userId, movieId);
            MovieCache.Set(userId, movieId, movie);

            await HandlerUtils.SendMovieWithOptionalPoster(bot, chatId, movie, message, cancellationToken, keyboard);
        }

        var maxPage = (movies.Count - 1) / pageSize;

        var keyboardButtons = new List<KeyboardButton[]>();

        var row = new List<KeyboardButton>();
        if (page > 0) row.Add(new KeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞"));
        if (page < maxPage) row.Add(new KeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"));
        if (row.Count > 0) keyboardButtons.Add(row.ToArray());

        keyboardButtons.Add([new KeyboardButton("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]);

        var replyMarkup = new ReplyKeyboardMarkup(keyboardButtons)
        {
            ResizeKeyboard = true
        };

        await bot.SendMessage(
            chatId,
            $"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page + 1} –∑ {maxPage + 1}",
            replyMarkup: replyMarkup,
            cancellationToken: cancellationToken);
    }

}